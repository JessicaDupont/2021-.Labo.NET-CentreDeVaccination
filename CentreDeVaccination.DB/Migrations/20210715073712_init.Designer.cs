// <auto-generated />
using System;
using CentreDeVaccination.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CentreDeVaccination.DB.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210715073712_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.AdresseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodePostal")
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Rue")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Adresse");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.CentreVaccinationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EntrepotIdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntrepotIdId");

                    b.ToTable("CentreDeVaccination");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.EntrepotEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdresseId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Entrepot");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.HoraireEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentreIdId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("DureePlageVaccination")
                        .HasColumnType("time");

                    b.Property<DateTime>("Fermeture")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FermetureBis")
                        .HasColumnType("datetime2");

                    b.Property<string>("Jour")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("NbVaccinationParPlage")
                        .HasColumnType("int");

                    b.Property<DateTime>("Ouverture")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OuvertureBis")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CentreIdId");

                    b.ToTable("Horaire");

                    b.HasCheckConstraint("CK_Jour", "Jour in ('Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche')");

                    b.HasCheckConstraint("CK_Fermeture", "Fermeture > Ouverture");

                    b.HasCheckConstraint("CK_OuvertureBis", "OuvertureBis >= Fermeture");

                    b.HasCheckConstraint("CK_FermetureBis", "FermetureBis > OuvertureBis");

                    b.HasCheckConstraint("CK_NbVaccination", "NbVaccinationParPlage > 0");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.LotEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NbDoses")
                        .HasColumnType("int");

                    b.Property<string>("NumLot")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("VaccinIdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NumLot")
                        .IsUnique();

                    b.HasIndex("VaccinIdId");

                    b.ToTable("Lot");

                    b.HasCheckConstraint("CK_NbDoses", "NbDoses >= 0");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.PatientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdresseEntity")
                        .HasColumnType("int");

                    b.Property<string>("InformationMedicales")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumRegNat")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("NumTelephone")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int?>("UtilisateurIdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdresseEntity");

                    b.HasIndex("UtilisateurIdId");

                    b.ToTable("Patient");

                    b.HasCheckConstraint("CK_NumRegNat", "NumRegNat LIKE '__.__.__-___.__'");

                    b.HasCheckConstraint("CK_NumTelephone", "NumTelephone LIKE '0_%/______%'");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.PersonnelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentreId")
                        .HasColumnType("int");

                    b.Property<int?>("CentreVaccinationEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("NumInami")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int?>("UtilisateurIdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CentreId")
                        .IsUnique();

                    b.HasIndex("CentreVaccinationEntityId");

                    b.HasIndex("UtilisateurIdId");

                    b.ToTable("Personnel");

                    b.HasCheckConstraint("CK_Grade", "Grade in ('Medecin', 'Infirmier', 'Sécurité', 'Bénévole')");

                    b.HasCheckConstraint("CK_NumInami", "NumInami LIKE '_-_-____-__-___'");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.RendezVousEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentreIdId")
                        .HasColumnType("int");

                    b.Property<int?>("LotIdId")
                        .HasColumnType("int");

                    b.Property<int>("PatientEntity")
                        .HasColumnType("int");

                    b.Property<int?>("PersonnelIdId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RendezVous")
                        .HasColumnType("datetime2");

                    b.Property<int>("VaccinIdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CentreIdId");

                    b.HasIndex("LotIdId");

                    b.HasIndex("PatientEntity");

                    b.HasIndex("PersonnelIdId");

                    b.HasIndex("VaccinIdId");

                    b.ToTable("RendezVous");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.TransitEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateEntree")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSortie")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntrepotIdId")
                        .HasColumnType("int");

                    b.Property<int>("LotIdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntrepotIdId");

                    b.HasIndex("LotIdId");

                    b.ToTable("Transit");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.UtilisateurEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nom")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Prenom")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Utilisateur");

                    b.HasCheckConstraint("CK_Email", "Email like '_%@_%'");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.VaccinEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fabricant")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<TimeSpan>("IntervalleMaximum")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("IntervalleMinimum")
                        .HasColumnType("time");

                    b.Property<string>("Nom")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Nom")
                        .IsUnique()
                        .HasFilter("[Nom] IS NOT NULL");

                    b.ToTable("Vaccin");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.CentreVaccinationEntity", b =>
                {
                    b.HasOne("CentreDeVaccination.DB.Entities.EntrepotEntity", "EntrepotId")
                        .WithMany()
                        .HasForeignKey("EntrepotIdId");

                    b.Navigation("EntrepotId");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.HoraireEntity", b =>
                {
                    b.HasOne("CentreDeVaccination.DB.Entities.CentreVaccinationEntity", "CentreId")
                        .WithMany("Horaires")
                        .HasForeignKey("CentreIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CentreId");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.LotEntity", b =>
                {
                    b.HasOne("CentreDeVaccination.DB.Entities.VaccinEntity", "VaccinId")
                        .WithMany("Lots")
                        .HasForeignKey("VaccinIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VaccinId");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.PatientEntity", b =>
                {
                    b.HasOne("CentreDeVaccination.DB.Entities.AdresseEntity", "AdresseId")
                        .WithMany()
                        .HasForeignKey("AdresseEntity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CentreDeVaccination.DB.Entities.UtilisateurEntity", "UtilisateurId")
                        .WithMany()
                        .HasForeignKey("UtilisateurIdId");

                    b.Navigation("AdresseId");

                    b.Navigation("UtilisateurId");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.PersonnelEntity", b =>
                {
                    b.HasOne("CentreDeVaccination.DB.Entities.CentreVaccinationEntity", "Centre")
                        .WithOne("ResponsableId")
                        .HasForeignKey("CentreDeVaccination.DB.Entities.PersonnelEntity", "CentreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CentreDeVaccination.DB.Entities.CentreVaccinationEntity", null)
                        .WithMany("Personnel")
                        .HasForeignKey("CentreVaccinationEntityId");

                    b.HasOne("CentreDeVaccination.DB.Entities.UtilisateurEntity", "UtilisateurId")
                        .WithMany()
                        .HasForeignKey("UtilisateurIdId");

                    b.Navigation("Centre");

                    b.Navigation("UtilisateurId");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.RendezVousEntity", b =>
                {
                    b.HasOne("CentreDeVaccination.DB.Entities.CentreVaccinationEntity", "CentreId")
                        .WithMany("RDVs")
                        .HasForeignKey("CentreIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CentreDeVaccination.DB.Entities.LotEntity", "LotId")
                        .WithMany("RDVs")
                        .HasForeignKey("LotIdId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CentreDeVaccination.DB.Entities.PatientEntity", "PatientId")
                        .WithMany("RDVs")
                        .HasForeignKey("PatientEntity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CentreDeVaccination.DB.Entities.PersonnelEntity", "PersonnelId")
                        .WithMany("RDVs")
                        .HasForeignKey("PersonnelIdId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CentreDeVaccination.DB.Entities.VaccinEntity", "VaccinId")
                        .WithMany("RDVs")
                        .HasForeignKey("VaccinIdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CentreId");

                    b.Navigation("LotId");

                    b.Navigation("PatientId");

                    b.Navigation("PersonnelId");

                    b.Navigation("VaccinId");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.TransitEntity", b =>
                {
                    b.HasOne("CentreDeVaccination.DB.Entities.EntrepotEntity", "EntrepotId")
                        .WithMany("Transits")
                        .HasForeignKey("EntrepotIdId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CentreDeVaccination.DB.Entities.LotEntity", "LotId")
                        .WithMany("Transits")
                        .HasForeignKey("LotIdId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntrepotId");

                    b.Navigation("LotId");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.CentreVaccinationEntity", b =>
                {
                    b.Navigation("Horaires");

                    b.Navigation("Personnel");

                    b.Navigation("RDVs");

                    b.Navigation("ResponsableId")
                        .IsRequired();
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.EntrepotEntity", b =>
                {
                    b.Navigation("Transits");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.LotEntity", b =>
                {
                    b.Navigation("RDVs");

                    b.Navigation("Transits");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.PatientEntity", b =>
                {
                    b.Navigation("RDVs");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.PersonnelEntity", b =>
                {
                    b.Navigation("RDVs");
                });

            modelBuilder.Entity("CentreDeVaccination.DB.Entities.VaccinEntity", b =>
                {
                    b.Navigation("Lots");

                    b.Navigation("RDVs");
                });
#pragma warning restore 612, 618
        }
    }
}
